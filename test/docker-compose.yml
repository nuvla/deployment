version: '3.3'

services:
  proxy:
    image: traefik:1.7
    command: --api --web --docker --docker.swarmMode --docker.watch --docker.exposedByDefault=false --loglevel=info
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    configs:
      - source: traefik.toml
        target: /traefik.toml
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - test-net

  es:
    image: nuvla/es:7.7.0.0
    environment:
      - cluster.name=elasticsearch
      - xpack.security.enabled=false
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - test-net

  zk:
    image: zookeeper:3.4
    environment:
      - ZOO_MY_ID=3
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    volumes:
      - zkdata:/data
      - zkdatalog:/datalog
    networks:
      - test-net

  api:
    image: nuvladev/api:subscription
    environment:
      - ES_ENDPOINTS=es
      - ZK_ENDPOINTS=zk:2181
      - NUVLA_SUPER_PASSWORD=${NUVLA_SUPER_PASSWORD:-supeR8-supeR8}
      - KAFKA_ENDPOINTS=kafka:9092,nuvla-kafka:9092
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.port=8200"
        - "traefik.backend=api"
        - "traefik.backend.healthcheck.path=/api/cloud-entry-point"
        - "traefik.frontend.headers.customRequestHeaders=nuvla-authn-info:"
        - "traefik.frontend.rule=PathPrefix:/api"
      restart_policy:
        condition: on-failure
        delay: 5s    
    networks:
      - test-net

  # User interface takes the paths /, /ui/*, anything else
  # is routed elsewhere.
  ui:
    image: nuvladev/ui:notif-subscription
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.port=80"
        - "traefik.backend=ui"
        - "traefik.backend.healthcheck.path=/ui/index.html"
        - "traefik.frontend.headers.customRequestHeaders=nuvla-authn-info:"
        - "traefik.frontend.rule=Path:/,/ui/,/{a:ui.*}"
      restart_policy:
        condition: on-failure
        delay: 5s    
    networks:
      - test-net

  job-executor:
    image: nuvladev/job:master
    command: -- /app/job_executor.py --api-url http://api:8200 --api-authn-header group/nuvla-admin --zk-hosts zk:2181
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s    
    networks:
      - test-net

  jobd-jobs-cleanup:
    image: nuvladev/job:master
    entrypoint: /app/job_distributor_jobs_cleanup.py
    command: --api-url http://api:8200 --api-authn-header group/nuvla-admin --zk-hosts zk:2181
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - test-net

  jobd-deployment-state_10:
    image: nuvladev/job:master
    entrypoint: /app/job_distributor_deployment_state.py
    command: --api-url http://api:8200 --api-authn-header group/nuvla-admin --zk-hosts zk:2181 --interval 10
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - test-net

  jobd-deployment-state_60:
    image: nuvladev/job:master
    entrypoint: /app/job_distributor_deployment_state.py
    command: --api-url http://api:8200 --api-authn-header group/nuvla-admin --zk-hosts zk:2181 --interval 60
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - test-net

  jobd-comp-image-state:
    image: nuvladev/job:master
    entrypoint: /app/job_distributor_component_image_state.py
    command: --api-url http://api:8200 --api-authn-header group/nuvla-admin --zk-hosts zk:2181 --interval 3600
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - test-net

  kafka-zk:
    image: confluentinc/cp-zookeeper:6.0.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - test-net

  kafka:
    image: confluentinc/cp-server:6.0.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'kafka-zk:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    networks:
      - test-net

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:6.0.0
    configs:
      - source: ksql.queries.file
        target: /etc/ksqldb/nuvla-statements.sql
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "kafka:29092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
      KSQL_KSQL_QUERIES_FILE: /etc/ksqldb/nuvla-statements.sql
    networks:
      - test-net

  notify-slack:
    image: nuvladev/kafka-notify:master
    networks:
      - test-net
    command:
      - slack

  notify-email:
    image: nuvladev/kafka-notify:master
    networks:
      - test-net
    environment:
      # If not provided, will be taken from configuration/nuvla resource if defined there.
      # - SMTP_HOST:
      # - SMTP_PORT:
      # - SMTP_SSL:
      # - SMTP_USER:
      # - SMTP_PASSWORD:
    command:
      - email

configs:
  traefik.toml:
    file: ./traefik/traefik.toml
  ksql.queries.file:
    file: ./ksqldb/statements.sql

networks:
  test-net:
    attachable: true

volumes:
  esdata:
    driver: local
  zkdata:
    driver: local
  zkdatalog:
    driver: local
