version: '3.7'

services:
  proxy:
    image: traefik:1.7
    command: --api --web --docker --docker.swarmMode --docker.watch --docker.network=demo_frontend --docker.exposedByDefault=false --loglevel=info
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    configs:
      - source: traefik.toml
        target: /traefik.toml
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - frontend

  es:
    image: nuvla/es:7.11.1.0
    environment:
      - cluster.name=elasticsearch
      - xpack.security.enabled=false
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - backend

  zk:
    image: zookeeper:3.4
    environment:
      - ZOO_MY_ID=3
    ports:
      - "2181:2181"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    volumes:
      - zkdata:/data
      - zkdatalog:/datalog
    networks:
      - backend

  api:
    image: nuvla/api:5.11.0
    configs:
      - source: log4j.properties
        target: /opt/nuvla/server/resources/log4j.properties
    environment:
      - ES_ENDPOINTS=es
      - ZK_ENDPOINTS=zk:2181
      - NUVLA_SUPER_PASSWORD=supeR8-supeR8
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.port=8200"
        - "traefik.backend=api"
        - "traefik.backend.healthcheck.path=/api/cloud-entry-point"
        - "traefik.frontend.headers.customRequestHeaders=nuvla-authn-info:"
        - "traefik.frontend.rule=PathPrefix:/api"
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - backend
      - frontend
    healthcheck:
      start_period: 30s
      retries: 5
      test: curl -sSf http://localhost:8200/api/cloud-entry-point || exit 1

  # User interface takes the paths /, /ui/*, anything else
  # is routed elsewhere.
  ui:
    image: nuvla/ui:2.16.0
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.port=80"
        - "traefik.backend=ui"
        - "traefik.backend.healthcheck.path=/ui/index.html"
        - "traefik.frontend.headers.customRequestHeaders=nuvla-authn-info:"
        - "traefik.frontend.rule=Path:/,/ui/,/{a:ui.*}"
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - frontend

  job-executor:
    image: nuvla/job:2.13.0
    command: -- /app/job_executor.py --api-url http://api:8200 --api-insecure --api-authn-header group/nuvla-admin --zk-hosts zk:2181
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - backend

  jobd-jobs-cleanup:
    image: nuvla/job:2.13.0
    entrypoint: /app/job_distributor_jobs_cleanup.py
    command: --api-url http://api:8200 --api-insecure --api-authn-header group/nuvla-admin --zk-hosts zk:2181
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - backend

  jobd-deployment-state_10:
    image: nuvla/job:2.13.0
    entrypoint: /app/job_distributor_deployment_state.py
    command: --api-url http://api:8200 --api-insecure --api-authn-header group/nuvla-admin --zk-hosts zk:2181 --interval 10
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - backend

  jobd-deployment-state_60:
    image: nuvla/job:2.13.0
    entrypoint: /app/job_distributor_deployment_state.py
    command: --api-url http://api:8200 --api-insecure --api-authn-header group/nuvla-admin --zk-hosts zk:2181 --interval 60
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - backend

  jobd-comp-image-state:
    image: nuvla/job:2.13.0
    entrypoint: /app/job_distributor_component_image_state.py
    command: --api-url http://api:8200 --api-insecure --api-authn-header group/nuvla-admin --zk-hosts zk:2181 --interval 3600
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - backend

  jobd-srvc-image-state:
    image: nuvla/job:2.13.0
    entrypoint: /app/job_distributor_service_image_state.py
    command: --api-url http://api:8200 --api-insecure --api-authn-header group/nuvla-admin --zk-hosts zk:2181 --interval 3600
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - backend

  jobd-nuvlabox-releases:
    image: nuvla/job:2.13.0
    entrypoint: /app/job_distributor_nuvlabox_releases.py
    command: --api-url http://api:8200 --api-insecure --api-authn-header group/nuvla-admin --zk-hosts zk:2181
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - backend

  jobd-usage-report:
    image: nuvla/job:2.13.0
    entrypoint: /app/job_distributor_usage_report.py
    command: --api-url http://api:8200 --api-insecure --api-authn-header group/nuvla-admin --zk-hosts zk:2181
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - backend

  jobd-vulnerabilities-database:
    image: nuvla/job:2.13.0
    entrypoint: /app/job_distributor_vulnerabilities_database.py
    command: --api-url http://api:8200 --api-insecure --api-authn-header group/nuvla-admin --zk-hosts zk:2181
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - backend

  jobd-nuvlabox-status-offline:
    image: nuvla/job:2.13.0
    entrypoint: /app/job_distributor_nuvlabox_status_offline.py
    command: --api-url http://api:8200 --api-insecure --api-authn-header group/nuvla-admin --zk-hosts zk:2181
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - backend

  jobd-subscriptions:
    image: nuvla/job:2.13.0
    entrypoint: /app/job_distributor_subscriptions.py
    command: --api-url http://api:8200 --api-authn-header group/nuvla-admin --zk-hosts zk:2181
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - backend

  # Zookeeper for Kafka
  kafka-zk:
    image: confluentinc/cp-zookeeper:6.1.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend
    volumes:
    - kafka-zk-data:/data
    - kafka-zk-datalog:/datalog

  # Kafka broker with Connect.
  kafka:
    image: confluentinc/cp-kafka:6.1.0
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/var/lib/kafka/data
    configs:
      - source: kafka-conf-distributed
        target: /etc/kafka/connect-distributed.properties
      - source: elastic-source-nuvlabox-all
        target: /etc/kafka/elastic-source-nuvlabox-all.json
    networks:
      - backend
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'kafka-zk:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      ES_SOURCE_CONNECT_VER: "1.3"
      FROM_SCRATCH: "true"
    command:
      - bash
      - -xc
      - |
        ### Cleanup from previous launch
        [ "$$FROM_SCRATCH" == "true" ] && rm -f /var/lib/kafka/data/meta.properties

        ### Start Kafka
        echo "Launching Kafka"
        /etc/confluent/docker/run &

        ### Install ES Connect source
        mkdir -p /usr/share/java/elastic-source-connect
        curl -L --output /usr/share/java/elastic-source-connect/elastic-source-connect-$${ES_SOURCE_CONNECT_VER}-jar-with-dependencies.jar \
            https://github.com/DarioBalinzo/kafka-connect-elasticsearch-source/releases/download/v$${ES_SOURCE_CONNECT_VER}/elastic-source-connect-$${ES_SOURCE_CONNECT_VER}-jar-with-dependencies.jar

        ### Start Kafka Connect worker
        echo "Launching Kafka Connect worker"
        connect-distributed -daemon /etc/kafka/connect-distributed.properties
        echo "Waiting for Kafka Connect to start listening on localhost:8083"
        kc_endpoint=http://localhost:8083
        while : ; do
          curl_status=$$(curl -s -o /dev/null -w %{http_code} $$kc_endpoint/connectors)
          echo -e $$(date) " Kafka Connect listener HTTP state: " $$curl_status " (waiting for 200)"
          if [ $$curl_status -eq 200 ] ; then
            break
          fi
          sleep 5
        done

        ### Start Elasticsearch Connect
        echo "Start ES source connector"
        curl -X POST -H "Content-Type: application/json" --data @/etc/kafka/elastic-source-nuvlabox-all.json $$kc_endpoint/connectors
        sleep 1
        curl $$kc_endpoint/connectors/elastic-source-nuvlabox-status/status

        sleep infinity

  # ksqlDB stream processor
  ksqldb-server:
    image: confluentinc/ksqldb-server:0.15.0
    ports:
      - "8088:8088"
    configs:
      - source: ksql.queries.file
        target: /etc/ksqldb/nuvla-statements.sql
    environment:
      KSQL_CONFIG_DIR: "/etc/ksqldb"
      KSQL_BOOTSTRAP_SERVERS: "kafka:29092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
      KSQL_KSQL_QUERIES_FILE: /etc/ksqldb/nuvla-statements.sql
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
    networks:
      - backend

  # Notification service to Slack
  notify-slack:
    image: nuvla/kafka-notify:0.5.0
    networks:
      - backend
    command:
      - slack
    environment:
      NUVLA_ENDPOINT: "${NUVLA_ENDPOINT}"

  # Notification service to Email
  notify-email:
    image: nuvla/kafka-notify:0.5.0
    networks:
      - backend
    command:
      - email
    environment:
      NUVLA_ENDPOINT: "${NUVLA_ENDPOINT}"
      # If not provided, will be taken from configuration/nuvla resource if defined there.
      SMTP_HOST: "${SMTP_HOST}"
      SMTP_PORT: "${SMTP_PORT}"
      SMTP_SSL: "${SMTP_SSL}"
      SMTP_USER: "${SMTP_USER}"
      SMTP_PASSWORD: "${SMTP_PASSWORD}"

configs:
  traefik.toml:
    file: ./traefik/traefik.toml
  log4j.properties:
    file: ./log4j.properties
  ksql.queries.file:
    file: ../streams/ksqldb/statements.replicas-1.sql
  kafka-conf-distributed:
    file: ../streams/kafka/connect-distributed.properties
  elastic-source-nuvlabox-all:
    file: ../streams/kafka/elastic-source-nuvlabox-all.json

networks:
  frontend:
  backend:

volumes:
  esdata:
    driver: local
  zkdata:
    driver: local
  zkdatalog:
    driver: local
  kafka-zk-data:
    driver: local
  kafka-zk-datalog:
    driver: local
  kafka-data:
    driver: local
