version: '3.7'

networks:
  traefik-public:
    external: true
  nuvla-backend:
    external: true

secrets:
  session.crt:
    file: ./secrets/session.crt
  session.key:
    file: ./secrets/session.key

configs:
  log4j.properties:
    file: ./log4j.properties

services:
  api:
    image: nuvla/api:5.14.0
    configs:
      - source: log4j.properties
        target: /opt/nuvla/server/resources/log4j.properties
    environment:
      - ES_ENDPOINTS=es
      - ES_SNIFF_INTERVAL=5001
      - ES_SNIFF_AFTER_FAILURE_DELAY=1001
      - ZK_ENDPOINTS=zk:2181
      - NUVLA_SUPER_PASSWORD=supeR8-supeR8
      - KAFKA_ENDPOINTS=${KAFKA_BOOTSTRAP_SERVERS:-kafka:9092}
    secrets:
      - source: session.crt
        target: /etc/nuvla/session/session.crt
      - source: session.key
        target: /etc/nuvla/session/session.key
    deploy:
      placement:
        constraints:
          - node.labels.type == frontend
      labels:
        - "traefik.enable=true"
        - "traefik.port=8200"
        - "traefik.backend=api"
        - "traefik.backend.healthcheck.path=/api/cloud-entry-point"
        - "traefik.frontend.headers.customRequestHeaders=nuvla-authn-info:"
        - "traefik.frontend.rule=PathPrefix:/api"
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - nuvla-backend
      - traefik-public

  # User interface takes the paths /, /ui/*, anything else
  # is routed elsewhere.
  ui:
    image: nuvla/ui:2.19.0
    deploy:
      placement:
        constraints:
          - node.labels.type == worker-job
      labels:
        - "traefik.enable=true"
        - "traefik.port=80"
        - "traefik.backend=ui"
        - "traefik.backend.healthcheck.path=/ui/index.html"
        - "traefik.frontend.headers.customRequestHeaders=nuvla-authn-info:"
        - "traefik.frontend.rule=Path:/,/ui/,/{a:ui.*}"
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - traefik-public

  job-executor:
    image: nuvla/job:2.15.2
    command: -- /app/job_executor.py --api-url http://api:8200 --api-insecure --api-authn-header group/nuvla-admin --zk-hosts zk:2181
    deploy:
      replicas: 5
      placement:
        constraints:
          - node.labels.type == worker-job
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - nuvla-backend

  job-distributor:
    image: nuvla/job:2.15.2
    entrypoint: /app/job_distributor.py
    command: --api-url http://api:8200 --api-insecure --api-authn-header group/nuvla-admin --zk-hosts zk:2181
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.labels.type == worker-job
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - nuvla-backend

  notify-slack:
    image: nuvla/kafka-notify:0.5.0
    deploy:
      placement:
        constraints:
          - node.labels.type == worker-job
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - nuvla-backend
    command:
      - slack
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "${KAFKA_BOOTSTRAP_SERVERS:-kafka:9092}"

  notify-email:
    image: nuvla/kafka-notify:0.5.0
    deploy:
      placement:
        constraints:
          - node.labels.type == worker-job
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - nuvla-backend
    command:
      - email
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "${KAFKA_BOOTSTRAP_SERVERS:-kafka:9092}"
      # If not provided, will be taken from configuration/nuvla resource if defined there.
      SMTP_HOST: "${SMTP_HOST}"
      SMTP_PORT: "${SMTP_PORT}"
      SMTP_SSL: "${SMTP_SSL}"
      SMTP_USER: "${SMTP_USER}"
      SMTP_PASSWORD: "${SMTP_PASSWORD}"
